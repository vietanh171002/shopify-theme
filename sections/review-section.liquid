<style>
    .review-section-container{
        overflow: hidden;
        position: relative;
        background-color: rgb(249, 249, 249);
        padding-top: {{section.settings.padding_top}}px ;
        padding-bottom:{{section.settings.padding_bottom}}px ;
    }

    .review-section{
        display: flex;
        flex-direction: row;
    }

    .review-section-container .padding-right, .padding-left{
        width: 120px;
        height: 100%;
        position: absolute;
        background-color: rgb(249, 249, 249);
        z-index: 2;
        pointer-events: none;
    }

    .review-section-container .padding-right{
        right: 0; 
    }

    .review-section-container .padding-left{
        left: 0; 
    }

    @media (max-width: 768px){
        .review-section-container .padding-right, .padding-left{
            display: none;
        }
    }
</style>

    <div class="review-section-container" >
        <span class="padding-left"></span>
        <span class="padding-right"></span>
        <div class="review-section" id="movableDiv">
            {% for block in section.blocks %}
                {% render 'review-card',
                avatar_url: {{block.settings.avatar.src}},
                review: {{block.settings.review}},
                reviewer: {{block.settings.reviewer}},
                role: {{block.settings.role}}
            %}
            {% endfor %}
        </div>
    </div>

<script>
    const movableDiv = document.getElementById('movableDiv');
    let isDragging = false;
    let offsetX, initialX;
    let xBefore, xAfter; // Declare xBefore outside of the mouse down event listener
    let currentPage = 0 ; 

    let blockCount = {{section.blocks.size}} - 1 ; 


    // Event listener for mouse down
    movableDiv.addEventListener('mousedown', (e) => {
    console.log('blockCount>>>',blockCount); 
    console.log('currentpage>>>',currentPage); 

        isDragging = true;
        movableDiv.style.transitionDuration = '0s';
        offsetX = e.clientX - movableDiv.getBoundingClientRect().left;
        xBefore = e.clientX; // Update xBefore here
    });

    // Event listener for mouse move
    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            const newX = e.clientX - offsetX;
            movableDiv.style.transform = `translateX(${newX}px)`;
        }
    });

    // Event listener for mouse up
    document.addEventListener('mouseup', (e) => {
        if (isDragging ) {
            isDragging = false;
            movableDiv.style.transitionDuration = '0.7s';
            movableDiv.style.pointerEvents = 'none'; 
            setTimeout(()=>{
                movableDiv.style.pointerEvents = 'auto';    
            }, 700);
            xAfter = e.clientX;
            if ((xBefore - xAfter) > 0.3 * window.innerWidth && currentPage > blockCount*-1) {
                currentPage -= 1; 
            } else if((xAfter - xBefore) > 0.3 * window.innerWidth && currentPage < 0){
                currentPage += 1; 
            }
            movableDiv.style.transform = `translateX(${currentPage*100}vw)`; 
        }
    });
</script>

{% schema %}
{
    "name": "Review section",
    "settings": [
        {
            "type": "range",
            "id": "padding_top",
            "min": 0,
            "max": 100,
            "step": 4,
            "unit": "px",
            "label": "Padding top",
            "default": 0
        },
        {
            "type": "range",
            "id": "padding_bottom",
            "min": 0,
            "max": 100,
            "step": 4,
            "unit": "px",
            "label": "Padding bottom",
            "default": 0
        }
    ],
    "blocks": [
        {
            "name": "Review",
            "type": "review",
            "settings": [
                {
                    "type": "text",
                    "id":"review",
                    "label": "Review"
                },
                {
                    "type": "text",
                    "id": "reviewer",
                    "label": "Reviewer name"
                },
                {
                    "type": "text",
                    "id": "role",
                    "label": "Role"
                },
                {
                    "type": "image_picker",
                    "id": "avatar",
                    "label": "Avatar"
                }
            ]
        }
    ],
    "presets": [
        {
            "name": "Review section"
        }
    ]
}
{% endschema %}